# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestinputform():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testinputform(self):
    # Test name: test_input_form
    # Step # | name | target | value
    # 1 | open | /form | 
    self.driver.get("https://formy-project.herokuapp.com/form")
    # 2 | setWindowSize | 706x728 | 
    self.driver.set_window_size(706, 728)
    # 3 | click | id=first-name | 
    self.driver.find_element(By.ID, "first-name").click()
    # 4 | type | id=first-name | tester
    self.driver.find_element(By.ID, "first-name").send_keys("tester")
    # 5 | click | id=last-name | 
    self.driver.find_element(By.ID, "last-name").click()
    # 6 | type | id=last-name | one
    self.driver.find_element(By.ID, "last-name").send_keys("one")
    # 7 | click | id=job-title | 
    self.driver.find_element(By.ID, "job-title").click()
    # 8 | type | id=job-title | QA
    self.driver.find_element(By.ID, "job-title").send_keys("QA")
    # 9 | click | css=.input-group:nth-child(7) > .col-sm-8:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".input-group:nth-child(7) > .col-sm-8:nth-child(2)").click()
    # 10 | click | css=.input-group:nth-child(7) > .col-sm-8:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".input-group:nth-child(7) > .col-sm-8:nth-child(2)").click()
    # 11 | click | id=radio-button-1 | 
    self.driver.find_element(By.ID, "radio-button-1").click()
    # 12 | click | id=radio-button-2 | 
    self.driver.find_element(By.ID, "radio-button-2").click()
    # 13 | click | id=radio-button-3 | 
    self.driver.find_element(By.ID, "radio-button-3").click()
    # 14 | click | id=checkbox-2 | 
    self.driver.find_element(By.ID, "checkbox-2").click()
    # 15 | click | id=select-menu | 
    self.driver.find_element(By.ID, "select-menu").click()
    # 16 | click | id=select-menu | 
    self.driver.find_element(By.ID, "select-menu").click()
    # 17 | select | id=select-menu | label=2-4
    dropdown = self.driver.find_element(By.ID, "select-menu")
    dropdown.find_element(By.XPATH, "//option[. = '2-4']").click()
    # 18 | click | id=datepicker | 
    self.driver.find_element(By.ID, "datepicker").click()
    # 19 | click | css=tr:nth-child(5) > .day:nth-child(4) | 
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) > .day:nth-child(4)").click()
    # 20 | click | linkText=Submit | 
    self.driver.find_element(By.LINK_TEXT, "Submit").click()
    # 21 | click | css=.container | 
    self.driver.find_element(By.CSS_SELECTOR, ".container").click()
    # 22 | assertText | css=.alert | The form was successfully submitted!
    assert self.driver.find_element(By.CSS_SELECTOR, ".alert").text == "The form was successfully submitted!"
    # 23 | verifyText | css=.alert | The form was successfully submitted!
    assert self.driver.find_element(By.CSS_SELECTOR, ".alert").text == "The form was successfully submitted!"
    # 24 | close |  | 
    self.driver.close()
  
